# name: Reviewer Approval Check

# on:
#   pull_request:
#     branches:
#       - '**'  # Trigger on all PRs targeting any branch
#   pull_request_review:
#     types: [submitted]

# jobs:
#   approval:
#     name: Reviewer
#     runs-on: ubuntu-latest

#     steps:
#       - name: Debug Message
#         run: echo "✅ This workflow is triggered correctly"

#       - name: Check if PR is approved by TL or Sr Developer
#         env:
#           REVIEWER_NAME: ${{ secrets.REVIEWER_NAME }}  # e.g., RajCamrix,TrushangKCMX
#         uses: actions/github-script@v6
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const requiredUsers = process.env.REVIEWER_NAME.split(',').map(s => s.trim());
#             const { data: reviews } = await github.rest.pulls.listReviews({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               pull_number: context.payload.pull_request.number,
#             });

#             const approvedBy = reviews
#               .filter(r => r.state === 'APPROVED')
#               .map(r => r.user.login);

#             const isApproved = requiredUsers.some(user => approvedBy.includes(user));

#             if (!isApproved) {
#               core.setFailed(`❌ PR must be approved by one of: ${requiredUsers.join(', ')}. Approved by: ${approvedBy.join(', ') || 'no one'}`);
#             } else {
#               console.log(`✅ Approved by at least one required user.`);
#             }
        
 
name: Reviewer

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  reviewer-approval:
    name: Reviewer Approval
    runs-on: ubuntu-latest

    steps:
      - name: Check Reviewer Approval
        uses: actions/github-script@v6
        env:
          REVIEWER_NAME: ${{ secrets.REVIEWER_NAME }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const reviewers = process.env.REVIEWER_NAME.split(',').map(r => r.trim());

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            const approvedBy = reviews
              .filter(r => r.state === 'APPROVED')
              .map(r => r.user.login);

            const isApproved = reviewers.some(user => approvedBy.includes(user));

            if (!isApproved) {
              core.setFailed(`❌ PR must be approved by: ${reviewers.join(', ')}. Approved by: ${approvedBy.join(', ') || 'no one'}`);
            } else {
              console.log(`✅ Approved by: ${approvedBy.join(', ')}`);
            }
